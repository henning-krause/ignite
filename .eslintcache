[{"C:\\src-pub\\ignite\\src\\index.ts":"1"},{"size":5717,"mtime":1592488373217,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":18,"source":"6"},"14dh26f","C:\\src-pub\\ignite\\src\\index.ts",["7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"],"import * as tl from 'azure-pipelines-task-lib/task';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as net from \"net\";\r\nimport * as process from 'process';\r\nimport { ToolRunner } from 'azure-pipelines-task-lib/toolrunner';\r\nimport * as path from 'path';\r\n\r\nenum MessageType {\r\n    None = 0,\r\n    Error = 1,\r\n    Progress = 2,\r\n    \r\n}\r\n\r\nfunction WriteStringToPipe(value: string, socket: net.Socket) {\r\n    const buffer = stringToByteArray(value);\r\n    WriteNumberToPipe(buffer.length, socket);\r\n    socket.write(buffer);\r\n}\r\n\r\nfunction ReadNumberFromPipe(buffer: Buffer) {\r\n    return buffer.readInt32LE();\r\n}\r\nfunction WriteNumberToPipe(value: number, socket: net.Socket) {\r\n    socket.write(numberToBytesArray(value));\r\n}\r\n\r\nfunction stringToByteArray(value: string): Buffer {\r\n    const result = Buffer.from(value, 'utf16le'); \r\n    return result;\r\n}\r\n\r\nfunction completeMessage(socket: net.Socket) {\r\n    WriteNumberToPipe(0xF0000002, socket);\r\n    WriteNumberToPipe(4, socket);\r\n    WriteNumberToPipe(0, socket);\r\n}\r\n\r\nfunction numberToBytesArray (num: number): Uint8Array {\r\n    const arr = new ArrayBuffer(4); // an Int32 takes 4 bytes\r\n    const view = new DataView(arr);\r\n    view.setUint32(0, num, true); // byteOffset = 0; littleEndian = false\r\n    return new Uint8Array(arr);\r\n}\r\n\r\nfunction processProgressMessage(buffer: Buffer): number {\r\n    return buffer.readInt32LE(8);\r\n}\r\n\r\nfunction processErrorMessage(buffer: Buffer) {\r\n    const length = buffer.readInt32LE();\r\n    const errorMessage = buffer.toString(\"utf16le\", 4, (length*2)+4);\r\n    tl.error(errorMessage);\r\n}\r\n\r\nasync function executeBundle(bundlePath: string, commandLineParameters: string|undefined, logFile: string): Promise<number> {\r\n    const pipeSecret = uuidv4().toString();\r\n    const pipeName = `bpe_${process.pid}`;\r\n    const pipePath = `\\\\\\\\.\\\\pipe\\\\${pipeName}`;\r\n\r\n    tl.debug(\"starting listener\");\r\n    const server = net.createServer();\r\n\r\n    server.on(\"connection\", socket => {\r\n        console.log(\"Sending secret through pipeline\");\r\n        WriteStringToPipe(pipeSecret, socket);\r\n        WriteNumberToPipe(process.pid, socket);\r\n        \r\n        let hasClientIdBeenReceived = false;\r\n        let lastProgress = 0;\r\n        socket.on(\"data\", buffer => {\r\n            if (!hasClientIdBeenReceived) {\r\n                // We'll ignore the PID from the child process. I think, this security measure doesn't work any longer since the clean room was introduced.\r\n                hasClientIdBeenReceived = true;\r\n                return;\r\n            }\r\n            const messageType = <MessageType> buffer.readUInt32LE();\r\n            switch (messageType) {\r\n                case MessageType.Error: {\r\n                    processErrorMessage(buffer);\r\n                    break;\r\n                }\r\n                case MessageType.Progress: {\r\n                    const progress = processProgressMessage(buffer);\r\n                    if (progress !== lastProgress) {\r\n                        tl.setProgress(progress, \"Installing bundle\");\r\n                        lastProgress = progress;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            completeMessage(socket);   \r\n        });\r\n        \r\n    });\r\n    server.listen(pipePath);\r\n\r\n    const bundleTool: ToolRunner = tl.tool(bundlePath);\r\n    if (commandLineParameters) {\r\n        tl.debug(`Additional Command line parameters: ${commandLineParameters}`);\r\n        bundleTool.line(commandLineParameters);\r\n    }\r\n    bundleTool.arg(\"-quiet\");\r\n    bundleTool.arg(\"-log\");\r\n    bundleTool.arg(logFile);\r\n    bundleTool.arg(\"-burn.embedded\");\r\n    bundleTool.arg(pipeName);\r\n    bundleTool.arg(pipeSecret);\r\n    bundleTool.arg(process.pid.toString());\r\n\r\n\r\n    try {\r\n        return await bundleTool.exec({ignoreReturnCode: true});\r\n    }\r\n    finally {\r\n        server.close();\r\n    }\r\n}\r\n\r\nfunction attachLogs(filePath: string) {\r\n    tl.debug(`Finding logs in ${filePath}`);\r\n    const files = tl.findMatch(filePath, \"*.log\");\r\n    files.forEach(element => {\r\n        tl.uploadFile(element);\r\n    });\r\n}\r\n\r\nasync function run() {\r\n    try {\r\n        const bundlePath = tl.getInput('bundlePath', true);\r\n        const commandLineParameters: string | undefined = tl.getInput(\"commandLineParameters\");\r\n        const alwaysAttachLogFiles = tl.getBoolInput(\"alwaysAttachLogfiles\", false);\r\n        if (!bundlePath) throw new Error(\"Parameter bundlePath not set.\");\r\n\r\n        const tempPath =  tl.getVariable(\"Agent.TempDirectory\");\r\n        if (!tempPath) throw new Error(\"Agent.TempDirectory not set.\");\r\n        const logFile = path.join(tempPath, uuidv4(), path.basename(bundlePath, path.extname(bundlePath)) + \".log\");\r\n        tl.debug(`Log file is ${logFile}`);\r\n        const exitCode = await executeBundle(bundlePath, commandLineParameters, logFile);\r\n        tl.debug(`Exit code is ${exitCode}`);\r\n\r\n        if (exitCode !== 0 || alwaysAttachLogFiles) {\r\n            attachLogs(path.dirname(logFile));\r\n        }\r\n        if (exitCode == 0) {\r\n            tl.setResult(tl.TaskResult.Succeeded, \"Bundle installed successfully.\", true);\r\n            return;\r\n        }\r\n        \r\n        tl.setResult(tl.TaskResult.Failed, `Bundle failed with error ${exitCode}`, true);\r\n    }\r\n    catch (error) {\r\n        if (error instanceof Error) {\r\n            tl.setResult(tl.TaskResult.Failed, error.message);\r\n        }\r\n        else  {\r\n           // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\r\n           tl.setResult(tl.TaskResult.Failed, `Task failed unexpectedly. (${error})`);\r\n        }\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\r\nrun();",{"ruleId":"26","severity":1,"message":"27","line":3,"column":22,"nodeType":"28","messageId":"29","endLine":3,"endColumn":27,"fix":"30"},{"ruleId":"31","severity":1,"message":"32","line":21,"column":10,"nodeType":"33","messageId":"34","endLine":21,"endColumn":28},{"ruleId":"26","severity":1,"message":"27","line":52,"column":42,"nodeType":"28","messageId":"29","endLine":52,"endColumn":51,"fix":"35"},{"ruleId":"26","severity":1,"message":"27","line":61,"column":14,"nodeType":"28","messageId":"29","endLine":61,"endColumn":33,"fix":"36"},{"ruleId":"26","severity":1,"message":"27","line":64,"column":15,"nodeType":"28","messageId":"29","endLine":64,"endColumn":27,"fix":"37"},{"ruleId":"26","severity":1,"message":"27","line":65,"column":21,"nodeType":"28","messageId":"29","endLine":65,"endColumn":54,"fix":"38"},{"ruleId":"26","severity":1,"message":"27","line":71,"column":19,"nodeType":"28","messageId":"29","endLine":71,"endColumn":25,"fix":"39"},{"ruleId":"26","severity":1,"message":"27","line":86,"column":50,"nodeType":"28","messageId":"29","endLine":86,"endColumn":69,"fix":"40"},{"ruleId":"26","severity":1,"message":"27","line":104,"column":20,"nodeType":"28","messageId":"29","endLine":104,"endColumn":28,"fix":"41"},{"ruleId":"26","severity":1,"message":"27","line":105,"column":20,"nodeType":"28","messageId":"29","endLine":105,"endColumn":26,"fix":"42"},{"ruleId":"26","severity":1,"message":"27","line":107,"column":20,"nodeType":"28","messageId":"29","endLine":107,"endColumn":36,"fix":"43"},{"ruleId":"26","severity":1,"message":"27","line":123,"column":42,"nodeType":"28","messageId":"29","endLine":123,"endColumn":49,"fix":"44"},{"ruleId":"26","severity":1,"message":"27","line":132,"column":71,"nodeType":"28","messageId":"29","endLine":132,"endColumn":94,"fix":"45"},{"ruleId":"26","severity":1,"message":"27","line":133,"column":54,"nodeType":"28","messageId":"29","endLine":133,"endColumn":76,"fix":"46"},{"ruleId":"26","severity":1,"message":"27","line":134,"column":42,"nodeType":"28","messageId":"29","endLine":134,"endColumn":73,"fix":"47"},{"ruleId":"26","severity":1,"message":"27","line":136,"column":42,"nodeType":"28","messageId":"29","endLine":136,"endColumn":63,"fix":"48"},{"ruleId":"26","severity":1,"message":"27","line":137,"column":40,"nodeType":"28","messageId":"29","endLine":137,"endColumn":70,"fix":"49"},{"ruleId":"26","severity":1,"message":"27","line":138,"column":109,"nodeType":"28","messageId":"29","endLine":138,"endColumn":115,"fix":"50"},{"ruleId":"26","severity":1,"message":"27","line":147,"column":51,"nodeType":"28","messageId":"29","endLine":147,"endColumn":83,"fix":"51"},"quotes","Strings must use singlequote.","Literal","wrongQuotes",{"range":"52","text":"53"},"@typescript-eslint/no-unused-vars","'ReadNumberFromPipe' is defined but never used.","Identifier","unusedVar",{"range":"54","text":"55"},{"range":"56","text":"57"},{"range":"58","text":"59"},{"range":"60","text":"61"},{"range":"62","text":"63"},{"range":"64","text":"65"},{"range":"66","text":"67"},{"range":"68","text":"69"},{"range":"70","text":"71"},{"range":"72","text":"73"},{"range":"74","text":"75"},{"range":"76","text":"77"},{"range":"78","text":"79"},{"range":"80","text":"81"},{"range":"82","text":"83"},{"range":"84","text":"85"},{"range":"86","text":"87"},[113,118],"'net'",[1526,1535],"'utf16le'",[1871,1890],"'starting listener'",[1950,1962],"'connection'",[1997,2030],"'Sending secret through pipeline'",[2236,2242],"'data'",[3013,3032],"'Installing bundle'",[3539,3547],"'-quiet'",[3570,3576],"'-log'",[3629,3645],"'-burn.embedded'",[4025,4032],"'*.log'",[4281,4304],"'commandLineParameters'",[4361,4383],"'alwaysAttachLogfiles'",[4435,4466],"'Parameter bundlePath not set.'",[4513,4534],"'Agent.TempDirectory'",[4577,4607],"'Agent.TempDirectory not set.'",[4719,4725],"'.log'",[5108,5140],"'Bundle installed successfully.'"]